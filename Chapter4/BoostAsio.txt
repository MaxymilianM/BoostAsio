# The Boost.Asio
The Boost.Asio library is implemented as a framework, which exploits an inversion of control (IoC pattern) approach.
After one or more asynchronous operations are initiated, the application hands over one of its threads of execution to the library,
and the latter uses this thread to run the event loop and invoke the callbacks provided by the application
to notify it about the completion of the previously initiated asynchronous operation.
The results of asynchronous operations are passed to the callback as arguments.


# Boost.Thread with Boost.Asio
The Boost libraries also have the Boost.Thread library that is used to execute tasks concurrently,
but the Boost.Thread library is used to access internal resources,
such as the CPU core resource, while the Boost.Asio library is used to access external resources,
such as network connections, because the data is sent and received by a network card.

# Boost I/O service
The core object of the Boost::Asio namespace is io_service.
The I/O service is a channel that is used to access operating system resources
and establish communication between our program and the operating system that performs I/O requests.
There is also an I/O object that has the role of submitting I/O requests.
For instance, the tcp::socket object will provide a socket programming request from our program to the operating system.


# Using and blocking the run() function
One of the most frequently used functions in the I/O service object is the run() function.
It is used to run the io_service object's event processing loop.
It will block the next statement program until all the work in the io_service object is completed
and there are no more handlers to be dispatched.
If we stop the io_service object, it will no longer block the program.

# Event
In programming, event is an action or occurrence detected by a program,
which will be handled by the program using the event handler object.
The io_service object has one or more instances where events are handled, which is event processing loop.

# asio::io_service
This class is a central component in the Boost.Asio I/O infrastructure.
It provides access to the network I/O services of the underlying operating system. 

# io_service:: run(), poll(), post(), dispatch()
There are two member functions that we can use to get the io_service object working for us:
 - run(),
 - poll().
The run() function blocks the thread because it has to wait for the work that we assign to it,
by using post() or dispatch() functions.
The poll() function runs handlers (assigned by post() or dispatch() function) that are ready to run,
without blocking, until the io_context has been stopped or there are no more ready handlers.
The post() function is used to submit function object (handler)
for execution to the io_service object in order to run the given handler.
The dispatch() function is used to call the handler in the thread
in which the run() or poll() functions are currently being invoked.
The fundamental difference between the dispatch() and the post() functions is that
the dispatch() function completes the work right away whenever it can,
while the post() function always queues the work.

#io_service::work
Class to inform the io_service when it has work to do. Using run() or poll().
The work class is used to inform the io_service when work starts and finishes.
This ensures that the io_service object's run() function will not exit while work is underway,
and that it does exit when there is no unfinished work remaining.
The object of the asio::io_service::work class keeps threads running event loop from exiting this loop
when there are no pending asynchronous operations.
After version 1.84.0 work Deprecated: (Use executor_work_guard).

#io_service:: strand
Class that we use to wrap io_service object.
So after every strand.post() call from different threads we will be ordered.

#io_service:: stop()
If it is system failure - we have to invoke the stop() function in the io_service class
to ensure the work object has been destroyed in order for the program to be able to exit.

#deadline_timer:: async_wait(), expires_from_now()
The deadline_timer is a class that provides the ability to block or asynchronous wait
for a timer until it expires, known as the deadline timer.
A deadline timer indicates one of two states: expired or not expired.
Before the program calls the binded function, it has to wait for n seconds
because of usage expires_from_now() function from the timer object.
The async_wait() function will wait until the timer has expired.
In the binded function std::placeholders::_1 will be replaced
with the first argument given from async_wait(), with type boost::system::error_code.

#ip::tcp::socket 
The ::socket class represents an active socket.
Basically, there are two types of sockets (Berkeley Sockets API):
- Active socket (asio::ip::tcp::socket) - a socket intended to be used to send and receive data to and from a remote application
  or to initiate a connection establishment process with it.
- Passive socket (asio::ip::tcp::acceptor) - is the one used to passively wait for incoming connection requests from remote applications.
  Passive sockets don't take part in user data transmission.

#ip::tcp:: resolver, ::query, ::iterator, ::endpoint
::resolver is used to get the address of the remote host that we want to connect with.
With the ::query class, we pass the Internet address and port as a parameter.
The ::query  class is used to describe the query that can be passed to a ::resolver.
The ::iterator class, point to the list of results returned by a ::resolver.resolve().
Next we create ::endpoint type variable, by using ::iterator.
The ::endpoint will store the list of ip addresses that are generated by the ::resolver.
#Client::Connection::Connect()
The socket::connect() or socket.async_connect() member functions will connect the socket to the ::endpoint.
#Server::Acceptor::Listen()
The acceptor::open() function opens the acceptor socket by using the protocol that is retrieved from the endpoint variable.
Then we can use acceptor::set_option() function set any optional configs to the acceptor.
Next ::acceptor bound itself to the endpoint, by using the acceptor::bind() function.
#CloseSocket
To release the connection, we have to disable the sending and receiving data process on the socket first
by using the shutdown() member function. Invoke the close() member function to close the socket after.

#::acceptor
The ::acceptor class represents a passive socket.
Passive socket - is the one used to passively wait for incoming connection requests from remote applications.
Passive sockets are used only in server applications or hybrid applications that may play both roles of the client and server.
Passive sockets are defined only for the TCP protocol.
The acceptor socket is only used to establish connections with client applications and is not used in the further communication process.
When processing a pending connection request, the acceptor socket allocates a new active socket,
binds it to an endpoint chosen by the operating system, and connects it to the corresponding client application that has issued that connection request.
Then, this new active socket is ready to be used for communication with the client.
The acceptor socket becomes available to process the next pending connection request.
The ::acceptor object is used for accepting new socket connections by using acceptor::async_accept() function.
The program calls the acceptor::open() function to open the acceptor socket by using the protocol that is retrieved from the endpoint variable.
Then, by using the acceptor::set_option() function, we set an option on the acceptor to not reuse the address.
The acceptor is also bound to the endpoint using the acceptor::bind() function.
After that, we invoke the acceptor::listen() function to put the acceptor into the state where it will listen for new connections.
Finally, the acceptor will accept new connections by using the acceptor::async_accept() function, which will start an asynchronous accept.

#::acceptor::bind()
Before an active socket can communicate with a remote application or a passive socket can accept incoming connection requests,
they must be associated with a particular local IP address (or multiple addresses) and a protocol port number, that is, an endpoint.
The process of associating a socket with a particular endpoint is called binding.
When a socket is bound to an endpoint, all network packets coming into the host
from the network with that endpoint as their target address will be redirected to that particular socket by the operating system.

#::acceptor::listen()
The ::listen() listen for incoming connection requests.
This call switches the acceptor socket into the state in which it listens for incoming connection requests.
The argument (::max_connections) that the listen() method accepts as an argument specifies the size of the queue
maintained by the operating system to which it puts connection requests arriving from the clients.
The requests stay in the queue and are waiting for the server application to de-queue and process them.
When the queue becomes full, the new connection requests are rejected by the operating system.
Before ::listen() call all client's connection requests are rejected by the operating system.
After acceptor socket  switched into listening mode, the operating system allocates a queue for pending connection requests
associated with this acceptor socket and starts accepting connection request addressed to it.
The requests stay in the queue and are waiting for the server application to de-queue and process them. 
When the queue becomes full, the new connection requests are rejected by the operating system.

#::acceptor::accept()
This method accepts an active socket as an argument and performs several operations.
First, it checks the queue associated with the acceptor socket containing pending connection requests.
If the queue is empty, the method blocks execution until a new connection request arrives to an endpoint to which the acceptor socket is bound
and the operating system puts it in the queue.
If at least one connection request is available in the queue, the one on the top of the queue is extracted from it and processed.
The active socket that was passed to the accept() method as an argument is connected to the corresponding client application
which issued the connection request.

#tcp::acceptor::set_option() and tcp::acceptor::reuse_address
In windows, the option tcp::acceptor::reuse_address(true) equivalent to calling setsockopt() and specifying SO_REUSEADDR.
This specifically allows multiple sockets to be bound to an address even if it is in use.
Set true to avoid Exception "bind: Address already in use".

#::resolver::query()
An object of the resolver::query class representing a DNS name resolution query.

#::enable_shared_from_this
Allows an object t that is currently managed by a std::shared_ptr named pt to safely generate
additional std::shared_ptr instances pt1, pt2, ... that all share ownership of t with pt.
class Good : public std::enable_shared_from_this<Good>{...};

#::asio::async_write()
Start an asynchronous operation to write all of the supplied data to a stream.

#::socket::async_read_some()
This function is used to asynchronously read data from the stream socket.
The function call always returns immediately.

#::basic_stream_socket 
Provides stream-oriented socket functionality (write and read the socket).

#asio::buffer
The boost::asio::buffer function is used to create a buffer object to represent one of the:
 - raw memory,
 - an array of POD elements,
 - a vector of POD elements,
 - a std::string.
A buffer object represents a contiguous region of memory as a 2-tuple consisting of a pointer and size in bytes.
A tuple of the form {void*, size_t} specifies a mutable (modifiable) region of memory.
Similarly, a tuple of the form {const void*, size_t} specifies a const (non-modifiable) region of memory.
These two forms correspond to the classes mutable_buffer and const_buffer, respectively.
The asio::buffer() free function has 28 overloads that accept a variety of representations of a buffer
and return an object of either the asio::mutable_buffers_1 or asio::const_buffers_1 classes.
If the buffer argument passed to the asio::buffer() function is a read-only type, the function returns an object of the asio::const_buffers_1 class;
otherwise, an object of the asio::mutable_buffers_1 class is returned.

# asio::mutable_buffer and asio::const_buffer
::mutable_buffer represents a writable buffer (buffer for an input operation, such as ::socket::receive() or the asio::read()), 
::const_buffer represents a read-only one (buffer for an output operation such as ::socket::send() or the asio::write()).
However, they are not used in Boost.Asio I/O functions and methods directly.
Instead, the MutableBufferSequence and ConstBufferSequence concepts are introduced
The MutableBufferSequence concept - is a collection of the asio::mutable_buffer objects.
The ConstBufferSequence concept   - is a collection of the asio::const_buffer objects.
std::vector<asio::mutable_buffer> class satisfies the requirements of the MutableBufferSequence concept.

# asio::mutable_buffers_1 and asio::const_buffers_1
The asio::mutable_buffers_1 and asio::const_buffers_1 classes are adapters of the asio::mutable_buffer and asio::const_buffer classes, respectively.
They provide an interface and behavior that satisfy the requirements of the MutableBufferSequence and ConstBufferSequence concepts,
which allows us to pass these adapters as arguments to Boost.Asio I/O functions and methods.

# asio::streambuf
It's typedef for asio::basic_streambuf which is inherited from std::streambuf.
It means that it can be used as a stream buffer for STL stream classes.
In addition to this, several I/O functions provided by Boost.Asio deal with buffers that are represented as objects of this class.
We can work with an object of the asio::streambuf class just like we would work with any stream buffer class
that is inherited from the std::streambuf class. For example, we can assign this object to a stream
(for example, std::istream, std::ostream, or std::iostream, depending on our needs),
and then, use stream's operator<<() and operator>>() operators to write and read data to and from the stream.
Usually, in a typical client or server application, the data will be written to the buf stream buffer by the Boost.Asio input function
such as asio::read(), which accepts a stream buffer object as an argument and reads data from the socket to that buffer.

# ::write_some()
This method accepts an object that represents a composite buffer as an argument,
and as its name suggests, writes some amount of data from the buffer to the socket.
If the method succeeds, the return value indicates the number of bytes written.
The method may not send all the data provided to it through the buffers argument at once.
The method only guarantees that at least one byte will be written if an error does not occur.
In order to write all the data from the buffer to the socket, we may need to call this method several times.

# ::read_some()
This method accepts an object that represents a writable buffer (single or composite) as an argument,
and as its name suggests, reads some amount of data from the socket to the buffer.
If the method succeeds, the return value indicates the number of bytes read.
There is no way to control how many bytes the method will read.
The method only guarantees that at least one byte will be read if an error does not occur.
In order to read a certain amount of data from the socket, we may need to call the method several times.

# ::async_write_some()
This method initiates the write operation and returns immediately.
Write some amount of data from the buffer to the socket.
This method guarantees that at least one byte will be written during the corresponding asynchronous operation if an error does not occur.
It accepts an object that represents a buffer that contains the data to be written to the socket as its first argument.
The second argument is a callback, which will be called by Boost.Asio when an initiated operation is completed.
This argument can be a function pointer, functor, or any other object that satisfies the requirements of the WriteHandler concept.

# ::cancel()
This method cancel the initiated connection operation.
If the operation has not yet finished, it will be canceled
and the corresponding callback will be invoked with an argument
that specifies the error code containing the asio::error::operation_aborted value
to notify that the operation was canceled.
However, if the operation has already finished, calling the cancel() method has no effect.
When the callback function returns, the worker thread exits the event loop.

# socket::shutdown()
Shut down the socket to let the server know that we've sent the whole request.
It only disables writing, reading, or both the operations on the socket
and sends a service message to the peer application notifying about this fact.
Shutting down a socket never results in deallocating the socket.

# socket::close()
Closing a socket assumes returning the socket and all the other resources associated with it back to the operating system.
Just like memory, a process or a thread, a file handle or a mutex, a socket is a resource of an operating system.
And like any other resource, a socket should be returned back to the operating system. Otherwise, a resource leak may occur,
which may eventually lead to the exhaustion of the resource and to the application's fault or instability of the whole operating system.
Serious issues that may occur when sockets are not closed make closing a very important operation.
The main difference between shutting down and closing a TCP socket is that closing interrupts the connection if one is established
and, eventually, deallocates the socket and returns it back to the operating system, while shutting down only disables writing, reading,
or both the operations on the socket and sends a service message to the peer application notifying about this fact.
Shutting down a socket never results in deallocating the socket.

# Simulate TCP client
We can simulate TCP client by using telnet command: telnet IP_address port
> telnet 127.0.0.1 4444
